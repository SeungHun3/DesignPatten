==========================================================


중괄호 생성자


===========================================================
== 생성자 호출여부 ==

class A {
 public:
  A() { std::cout << "A 의 생성자 호출!" << std::endl; }
};

int main() {
  A a();  // 호출 x ==> 함수의 정의로 해석
  A b{};  // 호출 o

return 0;
}

===========================================================
== 암시적 변환여부 ==

class A {
 public:
  A(int x) { std::cout << "A 의 생성자 호출!" << std::endl; }
};

int main() {
  A a(3.5);  // Narrow-conversion 가능
  A b{3.5};  // Narrow-conversion 불가

return 0;
}


===========================================================

initializer_list 는 우리가 {} 를 이용해서 생성자를 호출할 때, 
클래스의 생성자들 중에 initializer_list 를 인자로 받는 생성자가 있다면 전달됩니다.
() 를 사용해서 생성자를 호출한다면 intializer_list 가 생성되지 않습니다.

== initializer_list == 
initializer_list 를 이용하면 컨테이너들을 간단하게 정의할 수 있습니다.

class A {
 public:
  A(std::initializer_list<int> mylist) {
	for (auto itr = mylist.begin(); itr != mylist.end(); ++itr) {
	  std::cout << *itr << std::endl;
	}
  }
};

int main() {

A a = {1, 2, 3, 4, 5};

return 0;
}

std::vector에는 컨테이너의 초기 크기와 컨테이너의 모든 초기 요소의 값을 지정할 수 있는 비std::initializer_list 생성자가 있다.

그런데, 컨테이너의 초기 값들을 지정할 수 있는, std::initializer_list를 받는 생성자도 있다.

이 때문에 수치 타입의 값들을 담는 std::vector를 생성할 때 생성자에 인수 두 개를 지정한다면, 그 인수들을 괄호로 감싸느냐 중괄호로 감싸느냐에 따라 아주 다른 결과가 나온다.

std::vector<int> v1(10, 20);    // 비std::initializer_list
                                // 생성자를 사용: 모든 요소의
                                // 값이 20인, 요소 10개짜리
                                // std::vector가 생성됨

std::vector<int> v2{ 10, 20 };    // std::initializer_list
                                // 생성자를 사용: 값이 각각 10과
                                // 20인 두 요소를 담은
                                // std::vector가 생성됨


==========================================================


explicit


===========================================================

#include <iostream>

class MyString {
  char* string_content;  // 문자열 데이터를 가리키는 포인터
  int string_length;     // 문자열 길이

  int memory_capacity;

 public:
  // capacity 만큼 미리 할당함. (explicit 키워드에 주목)
  explicit MyString(int capacity);

  // 문자열로 부터 생성
  MyString(const char* str);

  // 복사 생성자
  MyString(const MyString& str);

  ~MyString();

  int length() const;
  int capacity() const;
};

// .. (생략) ..

void DoSomethingWithString(MyString s) {
  // Do something...
}

int main() {
  DoSomethingWithString(3);  // ????
}

DoSomethingWithString(3) 부분에서 컴파일 오류가 발생 => int capacity 를 인자로 받는 생성자가

// capacity 만큼 미리 할당함. (explicit 키워드에 주목)
explicit MyString(int capacity);

위의 explicit 으로 되어 있기 때문. explicit 은 implicit 의 반대말로, 명시적 이라는 뜻을 가지고 있습니다.

explicit이 없다면
DoSomethingWithString(3);은 
MyString('3')이 아닌
DoSomethingWithString(MyString(3))으로 변환되어 의도하지 않은 암시적 변환이 발생하게 됨

==> 명확한 의도를 나타내는 키워드로 
MyString s(5);   // 허용
MyString s = 5;  // 컴파일 오류! 
와 같이 생성자에만 사용할 수 있도록 하기도 함


==========================================================


가변길이 템플릿


===========================================================
template <typename T, typename... Types>

typename 뒤에 ... 으로 오는 것을 템플릿 파리미터 팩(parameter pack) 이라고 한다. 
템플릿 파라미터 팩의 경우 0 개 이상의 템플릿 인자들을 나타냄

template <typename T, typename... Types>
void print(T arg, Types... args) {
  std::cout << arg << ", ";
  print(args...);
}

print(1, 3.1, "abc");  

=> T = int arg = 1 // args = (float)3.1  ,  (char*)"abc"

print 의 첫 번째 인자는 1 이므로 T 는 int 로 추론되고, arg 에는 1 이 된다. 그리고 args 에는 나머지 3.1 과 "abc" 가 오게 됩니다.

=> print(args...);
따라서 위 args... 에는 print 에 전달되었던 나머지 인자들이 재귀를 돌며 쭈르륵 호출됨